#!/bin/sh

# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

usage() {
        echo ""
        echo "Usage:"
        echo "($0 [-p or --partitioned | -m or --monolithic] [-S or --serial | -P or --parallel]"
        echo ""
        exit 0
}

# $@ is all command line parameters passed to the script.
# -o is for short options like -v
# -l is for long options with double dash like --version
# the comma separates different long options
# -a is for long options with single dash like -version
options=$(getopt -l "help,partitioned,monolithic:,serial,parallel" -o "hpm:SP" -a -- "$@")

# set --:
# If no arguments follow this option, then the positional parameters are unset.
# Otherwise, the positional parameters are set to the arguments, even if some
# of them begin with a ‘-’.
eval set -- "$options"

no_args=1

while true
do
    case $1 in

        -h|--help)
            usage
            exit 0
            ;;

        -p|--partitioned)
            no_args=0
            cp -r 0/fluidA/orig/partitioned/. 0/fluidA/.
            cp -r 0/fluidB/orig/partitioned/. 0/fluidB/.

            # create hexmesh
            # no -region option for extrudeMesh
            # thus, create and copy the meshes
            # create meshA
            #cd hexBaseMeshes/meshA
            #./Allrun
            # create meshB
            #cd ../meshB
            #./Allrun
            #cd ../..
            # copy meshA
            #cp -r ./hexBaseMeshes/meshA/constant/polyMesh ./constant/fluidA/.
            #cp -r ./hexBaseMeshes/meshA/constant/faMesh ./constant/fluidA/.
            # copy meshB
            #cp -r ./hexBaseMeshes/meshB/constant/polyMesh ./constant/fluidB/.

            # create polymeshes
            #cd polyBaseMeshes
            #./Allrun
            #cd ..

            # copy polymeshes
            # copy meshA
            cp -r ./polyBaseMeshes/constant/domain0/polyMesh/ ./constant/fluidA/
            cp -r ./polyBaseMeshes/constant/domain0/faMesh/ ./constant/fluidA/
            # copy meshB
            cp -r ./polyBaseMeshes/constant/domain1/polyMesh/ ./constant/fluidB/

            # copy meshA
            cp -r ./polyBaseMeshes/constant/domain1/polyMesh/ ./constant/fluidA/
            cp -r ./polyBaseMeshes/constant/domain1/faMesh/ ./constant/fluidA/
            # copy meshB
            cp -r ./polyBaseMeshes/constant/domain0/polyMesh/ ./constant/fluidB/

            # scale to bubble with radius 0.75mm
            transformPoints -scale "(0.00075 0.00075 0.00075)" -region fluidB
            transformPoints -scale "(0.00075 0.00075 0.00075)" -region fluidA

            runApplication makeFaMesh -region fluidA

            ./makeLinks fluidA
            ;;

        -m|--monolithic)
            no_args=0
            echo "monolithic p-U coupling currently not supported"
            shift
            break
            ;;

        -S|--serial)
            no_args=0
            runApplication multiRegionFoam 2>/dev/null &
            ;;

        -P|--parallel)
            no_args=0
            runApplication decomposePar -region fluidA
            runApplication -l log.decomposePar.fluidB decomposePar -region fluidB

            mpirun -np 8 multiRegionFoam -noFunctionObjects -parallel 2>&1 > log.multiRegionFoam &
            ;;

        --)
            shift
            break;;

    esac
    shift
done

if [ "$no_args" -eq 1 ]; then
    >&2 echo "No arguments provided"
    usage
    exit 1
fi
